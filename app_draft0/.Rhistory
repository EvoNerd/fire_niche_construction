shiny::runApp()
runApp()
runApp()
runApp()
p <- c(epsilon=0.09, mu_A=0.2)
df <- get_dA_by_A(p)
ss <- get_steady_state(p, df)
sim <- sim_forward_time(time=0:100, init=c(A=0.1), p)
sim
fire <- get_fire_time(p, sim)
fire
ss
if (ss$outcome == "bistable"){
# we need to check the initial conditions as compared to the unstable equilibrium point
index_stable_pt <- ifelse(sim$density[1] < ss$unstable_pt,
1, 2)
# use the appropriate stable state value
inf_df <- data.frame(Value = fire_prob(p, ss$stable_pts[index_stable_pt]))
inf_df
}
inf_df
head(sim)
if (ss$outcome == "bistable"){
# we need to check the initial conditions as compared to the unstable equilibrium point
index_stable_pt <- ifelse(sim$density[1] < ss$unstable_pt,
1, 2)
# use the appropriate stable state value
inf_df <- data.frame(Value = fire_prob(p, ss$stable_pts[index_stable_pt]))
}
sim$density[1]
ss$unstable_pt
sim$density[1] < ss$unstable_pt
index_stable_pt
ss$stable_pts[index_stable_pt]
fire_prob(p, steady_state$stable_pts[index_stable_pt])
fire_prob(p, ss$stable_pts[index_stable_pt])
fire_prob(p, ss$stable_pts[2])
runApp()
ss$stable_pts[index_stable_pt]
index_stable_pt
fire_prob(p, steady_state$stable_pts[index_stable_pt])
fire_prob(p, ss$stable_pts[index_stable_pt])
ss$stable_pts[index_stable_pt]
fire_prob(p, 0)
head(sim)
tail(sim)
# use the appropriate stable state value
inf_df <- data.frame(Value = fire_prob(params, steady_state$stable_pts[index_stable_pt]))
inf_df <- data.frame(Value = fire_prob(p, ss$stable_pts[index_stable_pt]))
inf_df
inf_plot <- ggplot() +
geom_hline(data = inf_df, aes(yintercept = Value, color = colour_fire),
linewidth = 2.5) +
scale_x_continuous(limits=c(0.5, 1.5), breaks = c(1), labels = "outcome") +
scale_y_continuous(limits = range(fire_df$fire)) +
labs(x="") +
theme_bw() + theme(text = element_text(size=22),
axis.text=element_text(size=18),
axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = margin(t=3, r=2, b=0, l=0),
legend.position = "null"
)
ylims <- c(fire_prob(p, 1),
fire_prob(p, 0))
ylims
inf_plot <- ggplot() +
geom_hline(data = inf_df, aes(yintercept = Value, color = colour_fire),
linewidth = 2.5) +
scale_x_continuous(limits=c(0.5, 1.5), breaks = c(1), labels = "outcome") +
scale_y_continuous(limits = ylims) +
labs(x="") +
theme_bw() + theme(text = element_text(size=22),
axis.text=element_text(size=18),
axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = margin(t=3, r=2, b=0, l=0),
legend.position = "null"
)
plot(inf_plot)
runApp()
runApp()
ylim
ylims
ylims + c(-0.01, 1.01)
ylims + c(-0.01, 0.01)
runApp()
p <- c(epsilon=0.7, mu_A=0.1)
source("~/GitHub/fire_niche_construction/app_draft0/fire_funs.R", echo=TRUE)
df <- get_dA_by_A(p)
sim <- sim_forward_time(time=0:100, init=c(A=0.6), p)
tail(sim)
fire <- get_fire_time(p, sim)
ss <- get_steady_state(p, df)
ggplot_fire_finiteANDoutcome(p, sim, fire, ss)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
